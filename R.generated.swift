//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let segue = segue()

  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 20 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `Alert.Background`.
    var alertBackground: RswiftResources.ColorResource { .init(name: "Alert.Background", path: [], bundle: bundle) }

    /// Color `Alert.ContentBackground`.
    var alertContentBackground: RswiftResources.ColorResource { .init(name: "Alert.ContentBackground", path: [], bundle: bundle) }

    /// Color `Alert.ContentBorder`.
    var alertContentBorder: RswiftResources.ColorResource { .init(name: "Alert.ContentBorder", path: [], bundle: bundle) }

    /// Color `Alert.Message`.
    var alertMessage: RswiftResources.ColorResource { .init(name: "Alert.Message", path: [], bundle: bundle) }

    /// Color `Common.GradientBackground1`.
    var commonGradientBackground1: RswiftResources.ColorResource { .init(name: "Common.GradientBackground1", path: [], bundle: bundle) }

    /// Color `Common.GradientBackground2`.
    var commonGradientBackground2: RswiftResources.ColorResource { .init(name: "Common.GradientBackground2", path: [], bundle: bundle) }

    /// Color `Common.GradientBackground3`.
    var commonGradientBackground3: RswiftResources.ColorResource { .init(name: "Common.GradientBackground3", path: [], bundle: bundle) }

    /// Color `Connectivity.Cell.Background`.
    var connectivityCellBackground: RswiftResources.ColorResource { .init(name: "Connectivity.Cell.Background", path: [], bundle: bundle) }

    /// Color `Connectivity.Cell.Border`.
    var connectivityCellBorder: RswiftResources.ColorResource { .init(name: "Connectivity.Cell.Border", path: [], bundle: bundle) }

    /// Color `Connectivity.Cell.Subtitle`.
    var connectivityCellSubtitle: RswiftResources.ColorResource { .init(name: "Connectivity.Cell.Subtitle", path: [], bundle: bundle) }

    /// Color `Connectivity.Cell.Title`.
    var connectivityCellTitle: RswiftResources.ColorResource { .init(name: "Connectivity.Cell.Title", path: [], bundle: bundle) }

    /// Color `Details.CellVoltage.Border`.
    var detailsCellVoltageBorder: RswiftResources.ColorResource { .init(name: "Details.CellVoltage.Border", path: [], bundle: bundle) }

    /// Color `Details.CellVoltage.Text`.
    var detailsCellVoltageText: RswiftResources.ColorResource { .init(name: "Details.CellVoltage.Text", path: [], bundle: bundle) }

    /// Color `Details.Temperature.Title`.
    var detailsTemperatureTitle: RswiftResources.ColorResource { .init(name: "Details.Temperature.Title", path: [], bundle: bundle) }

    /// Color `Home.BatteryProgress`.
    var homeBatteryProgress: RswiftResources.ColorResource { .init(name: "Home.BatteryProgress", path: [], bundle: bundle) }

    /// Color `Home.Component.Title`.
    var homeComponentTitle: RswiftResources.ColorResource { .init(name: "Home.Component.Title", path: [], bundle: bundle) }

    /// Color `Home.Component.Value`.
    var homeComponentValue: RswiftResources.ColorResource { .init(name: "Home.Component.Value", path: [], bundle: bundle) }

    /// Color `Home.Components.Background`.
    var homeComponentsBackground: RswiftResources.ColorResource { .init(name: "Home.Components.Background", path: [], bundle: bundle) }

    /// Color `Settings.Cell`.
    var settingsCell: RswiftResources.ColorResource { .init(name: "Settings.Cell", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 25 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Alert`.
    var alert: RswiftResources.ImageResource { .init(name: "Alert", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Background`.
    var background: RswiftResources.ImageResource { .init(name: "Background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BatteryBackground`.
    var batteryBackground: RswiftResources.ImageResource { .init(name: "BatteryBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BatteryCharging`.
    var batteryCharging: RswiftResources.ImageResource { .init(name: "BatteryCharging", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BatteryFull`.
    var batteryFull: RswiftResources.ImageResource { .init(name: "BatteryFull", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BatteryLow`.
    var batteryLow: RswiftResources.ImageResource { .init(name: "BatteryLow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BatteryMask`.
    var batteryMask: RswiftResources.ImageResource { .init(name: "BatteryMask", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Detail`.
    var detail: RswiftResources.ImageResource { .init(name: "Detail", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `DetailUnselected`.
    var detailUnselected: RswiftResources.ImageResource { .init(name: "DetailUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Details.Cell.Temperature`.
    var detailsCellTemperature: RswiftResources.ImageResource { .init(name: "Details.Cell.Temperature", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Details.PCB`.
    var detailsPCB: RswiftResources.ImageResource { .init(name: "Details.PCB", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Home`.
    var home: RswiftResources.ImageResource { .init(name: "Home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Home.Bluetooth`.
    var homeBluetooth: RswiftResources.ImageResource { .init(name: "Home.Bluetooth", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Home.Component.Current`.
    var homeComponentCurrent: RswiftResources.ImageResource { .init(name: "Home.Component.Current", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Home.Component.Temperature`.
    var homeComponentTemperature: RswiftResources.ImageResource { .init(name: "Home.Component.Temperature", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Home.Component.Voltage`.
    var homeComponentVoltage: RswiftResources.ImageResource { .init(name: "Home.Component.Voltage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Home.Logo`.
    var homeLogo: RswiftResources.ImageResource { .init(name: "Home.Logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `HomeUnselected`.
    var homeUnselected: RswiftResources.ImageResource { .init(name: "HomeUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LaunchScreen-V2`.
    var launchScreenV2: RswiftResources.ImageResource { .init(name: "LaunchScreen-V2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LogoColor`.
    var logoColor: RswiftResources.ImageResource { .init(name: "LogoColor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Setting`.
    var setting: RswiftResources.ImageResource { .init(name: "Setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SettingUnselected`.
    var settingUnselected: RswiftResources.ImageResource { .init(name: "SettingUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Settings.Down`.
    var settingsDown: RswiftResources.ImageResource { .init(name: "Settings.Down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Settings.Up`.
    var settingsUp: RswiftResources.ImageResource { .init(name: "Settings.Up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon`.
    var icon: RswiftResources.ImageResource { .init(name: "icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    let homeViewController = homeViewController()

    /// This struct is generated for `HomeViewController`, and contains static references to 1 segues.
    struct homeViewController {

      /// Segue identifier `PushConnectivityPage`.
      var pushConnectivityPage: RswiftResources.SegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, ConnectivityViewController> { .init(identifier: "PushConnectivityPage") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "LaunchScreen-V2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'LaunchScreen-V2' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UITabBarController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {
        if UIKit.UIImage(named: "Background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Background' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Detail", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Detail' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DetailUnselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'DetailUnselected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HomeUnselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'HomeUnselected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SettingUnselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'SettingUnselected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Home.Components.Background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Home.Components.Background' is used in storyboard 'Main', but couldn't be loaded.") }
      }
    }
  }
}